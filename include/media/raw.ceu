#ifndef _CEU_MEDIA_RAW
#define _CEU_MEDIA_RAW

native/const
  _LP_TYPE_EVENT_ERROR,
  _LP_TYPE_EVENT_KEY,
  _LP_TYPE_EVENT_POINTER_CLICK,
  _LP_TYPE_EVENT_POINTER_MOVE,
  _LP_TYPE_EVENT_SEEK,
  _LP_TYPE_EVENT_START,
  _LP_TYPE_EVENT_STOP,
  _LP_TYPE_EVENT_TICK,
;

native/plain
  _char_ptr_ext,
  _lp_EventError,
  _lp_EventKey,
  _lp_EventPointerClick,
  _lp_EventPointerMove,
  _lp_EventTick,
  _lp_Event_ptr_ext,
;

native/pure
  _G_OBJECT,
  _G_OBJECT_TYPE,
  _LP_EVENT,
  _LP_EVENT_ERROR,
  _LP_EVENT_KEY,
  _LP_EVENT_POINTER_CLICK,
  _LP_EVENT_POINTER_MOVE,
  _LP_EVENT_TICK,
  _LP_IS_MEDIA,
  _LP_IS_SCENE,
  _LP_MEDIA,
  _LP_SCENE,
;

native/nohold
  _g_free,
  _g_object_get,
  _g_object_set,
  _g_object_unref,
  _g_object_ref,
  _lp_event_get_source,
  _lp_event_to_string,
  _lp_media_get_running_time,
  _lp_media_new,
  _lp_media_seek,
  _lp_media_stop,
  _lp_scene_advance,
  _lp_scene_pause,
  _lp_scene_receive,
  _lp_scene_resume,
;

native
  _GError,
  _GObject,
  _GType,
  _lp_Event,
  _lp_Media,
  _lp_media_start,
  _lp_scene_new,
  _lp_Scene,
;

#define NS 1000000
#define FREQ 15

input (_GObject&&, _lp_Event&&) LP_EVENT;

native/pre do
  ##include <glib.h>
  ##include <play.h>
  typedef char* char_ptr_ext;
  typedef lp_Event* lp_Event_ptr_ext;
end

/*********  Library Public API ***********/
data Region with
  var int x;
  var int y;
  var int width;
  var int height;
  var int z;
end

data Size with
  var int width;
  var int height;
end

data Media;

data Media.Text with
  vector[] byte   text;
  vector[] byte   font;
  var      Region region;
  var      uint   color;
end

data Media.Image with
  vector[] byte   uri;
  var      Region region;
  var      float  alpha;
end

data Media.Audio with
  vector[] byte  uri;
  var      float volume;
end

data Media.Video with
  vector[] byte   uri;
  var      Region region;
  var      float  alpha;
  var      float  volume;
end

/* SCENE */
data ISceneRaw with
  var&  _lp_Scene              ref;
  var&  Size?                  size;
  event (int, int, int, bool)  mouse_clicked;
  event (int, int)             mouse_moved;
  event (_char_ptr_ext, bool)  key;
  event (u64)                  tick;
  event (_char_ptr_ext)        error;
  event (void)                 quit;
end

code/await Scene_Raw (var Size? size)
              -> (var& ISceneRaw scene)
                  -> void
do
  var int w=0, h=0, tick_interval = 30 * NS;
  if size? then
    w = size!.width;
    h = size!.height;
  end

  var&? _lp_Scene ref_ = &_lp_scene_new(w, h)
    finalize (ref_) with
      _g_object_unref (_G_OBJECT(&&ref_!));
    end;

  var& _lp_Scene ref = &ref_!;

  var ISceneRaw scene_ = val ISceneRaw (&ref_!,&size, _,_,_,_,_,_);
  scene = &scene_;

  _g_object_set (&&ref,
                  "slave-audio", true,
                  "lockstep", true,
                  "interval", tick_interval,
                  null);

 spawn do
    loop do
      var _lp_Event_ptr_ext evt = null;
      do finalize with
        if (evt != null) then
          _g_object_unref(_G_OBJECT(evt));
        end
      end
      await async/thread (ref, evt) do
        evt = _lp_scene_receive (&&ref, true);
      end
      await async (evt) do
        if evt != null then
          emit LP_EVENT(_lp_event_get_source(evt), evt);
        end
      end
    end
    await FOREVER;
  end

  par/or do
    every FREQ ms do
      _lp_scene_advance(&&ref, FREQ * NS);
    end
  with
    loop do
      var _GObject&&  source;
      var _lp_Event&& evt;
      (source, evt) = await LP_EVENT until ((_LP_IS_SCENE(source) as bool) and
                                            _LP_SCENE(source) == &&ref);

      var _GType type = _G_OBJECT_TYPE (evt);

      /* MOUSE */

      if type == _LP_TYPE_EVENT_POINTER_CLICK then
        var _lp_EventPointerClick&& evt_ = _LP_EVENT_POINTER_CLICK(evt);

        var f64 x=_, y=_;
        var int button=_, pressed=_;
        _g_object_get(
            _G_OBJECT(evt_),
            "x", &&x,
            "y", &&y,
            "button", &&button,
            "press", &&pressed,
            null,
        );

        emit scene_.mouse_clicked(x as int, y as int,
                                     button, pressed as bool);
      else/if type == _LP_TYPE_EVENT_POINTER_MOVE then
        var _lp_EventPointerMove&& evt_ = _LP_EVENT_POINTER_MOVE(evt);

        var f64 x=_, y=_;
        _g_object_get(_G_OBJECT(evt_), "x", &&x, "y",&&y, null);

        emit scene_.mouse_moved(x as int, y as int);

      /* KEY */

      else/if type == _LP_TYPE_EVENT_KEY then
        var _lp_EventKey&& evt_ = _LP_EVENT_KEY(evt);

        var _char_ptr_ext key     = _;
        var int           pressed = _;
        _g_object_get(
            _G_OBJECT(evt_),
            "key",   &&key,
            "press", &&pressed,
            null
        );
        do finalize with
          _g_free (key);
        end

        emit scene_.key(key, pressed as bool);

      /* TICK */

      else/if type == _LP_TYPE_EVENT_TICK then
        var _lp_EventTick&& evt_ = _LP_EVENT_TICK(evt);

        var u64 ticks = _;
        _g_object_get (_G_OBJECT(evt_),
            "serial", &&ticks,
            null);

        emit scene_.tick (ticks);

      /* ERROR */

      else/if type == _LP_TYPE_EVENT_ERROR then
        var _lp_EventError&& evt_ = _LP_EVENT_ERROR(evt);
        var _GError&& err = null;
        var _char_ptr_ext msg = null;

        _g_object_get (_G_OBJECT(evt_), "error", &&err, null);
        msg = _lp_event_to_string (_LP_EVENT(evt));

        emit scene_.error (msg);

        do finalize with
          _g_free (msg);
        end

        break;
      end
    end
  with
    await scene_.quit;
  end
end

/* PLAY */
data IPlayerRaw with
  event void      ok;
  event void      sought;
  var&  _lp_Media ref;
end

/* Scene Raw functions */
code/tight
Scene_Raw_Pause (var& ISceneRaw scene) -> void
do
  _lp_scene_pause (&&scene.ref);
end

code/tight
Scene_Raw_Resume (var& ISceneRaw scene) -> void
do
  _lp_scene_resume(&&scene.ref);
end

code/tight
Scene_Raw_Set_Tick_Interval (var& ISceneRaw scene, var u64 interval) -> void
do
  _g_object_set (&&scene.ref,
                "interval",
                interval,
                null);
end

/* Player_Raw_New */

code/tight/dynamic
Player_Raw_New (var& ISceneRaw scene, dynamic var& Media media) -> _lp_Media&&
do
  _ceu_dbg_assert(0);
end

code/tight/dynamic
Player_Raw_New (var& ISceneRaw scene, dynamic var& Media.Text media) -> _lp_Media&&
do
  escape _lp_media_new(&&scene.ref, null);
end

code/tight/dynamic
Player_Raw_New (var& ISceneRaw scene, dynamic var& Media.Image media) -> _lp_Media&&
do
  escape _lp_media_new(&&scene.ref, &&media.uri[0]);
end

code/tight/dynamic
Player_Raw_New (var& ISceneRaw scene, dynamic var& Media.Video media) -> _lp_Media&&
do
  escape _lp_media_new(&&scene.ref, &&media.uri[0]);
end

code/tight/dynamic
Player_Raw_New (var& ISceneRaw scene, dynamic var& Media.Audio media) -> _lp_Media&&
do
  escape _lp_media_new(&&scene.ref, &&media.uri[0]);
end

/* Player_Raw_Set_Media */

code/tight/dynamic
Player_Raw_Set_Media (var& IPlayerRaw player, dynamic var& Media media) -> void
do
  _ceu_dbg_assert(0);
end

code/tight/dynamic
Player_Raw_Set_Media (var& IPlayerRaw player, dynamic var& Media.Text text) -> void
do
  _g_object_set (
      _G_OBJECT(&&player.ref),
      "text",       &&text.text[0],
      "text-font",  &&text.font[0],
      "text-color", text.color,
      "x",          text.region.x,
      "y",          text.region.y,
      "z",          text.region.z,
      "width",      text.region.width,
      "height",     text.region.height,
      null
  );
end

code/tight/dynamic
Player_Raw_Set_Media (var& IPlayerRaw player, dynamic var& Media.Image image) -> void
do
  _g_object_set (
      _G_OBJECT(&&player.ref),
      "x",      image.region.x,
      "y",      image.region.y,
      "z",      image.region.z,
      "width",  image.region.width,
      "height", image.region.height,
      "alpha",  image.alpha,
      null
  );
end

code/tight/dynamic
Player_Raw_Set_Media (var& IPlayerRaw player, dynamic var& Media.Audio audio) -> void
do
  _g_object_set (
    _G_OBJECT(&&player.ref),
    "volume", audio.volume,
    null
  );
end

code/tight/dynamic
Player_Raw_Set_Media (var& IPlayerRaw player, dynamic var& Media.Video video) -> void
do
  _g_object_set (
    _G_OBJECT(&&player.ref),
    "x",      video.region.x,
    "y",      video.region.y,
    "z",      video.region.z,
    "width",  video.region.width,
    "height", video.region.height,
    "alpha",  video.alpha,
    "volume", video.volume,
    null
  );
end

/* Player_Raw_Set_* */

code/tight
Player_Raw_Set_Char (var& IPlayerRaw player, var _char&& name, var _char&& value) -> void
do
  _g_object_set(&&player.ref, name, value, null);
end

code/tight
Player_Raw_Set_Int (var& IPlayerRaw player, var _char&& name, var int value) -> void
do
  _g_object_set(&&player.ref, name, value, null);
end

code/tight
Player_Raw_Get_Int (var& IPlayerRaw player, var _char&& name) -> int
do
  var int value = 0;
  _g_object_get (&&player.ref, name, &&value, null);
  escape value;
end

code/tight
Player_Raw_Set_Bool (var& IPlayerRaw player, var _char&& name, var bool value) -> void
do
  _g_object_set(&&player.ref, name, value, null);
end

code/tight
Player_Raw_Get_Bool (var& IPlayerRaw player, var _char&& name) -> bool
do
  var bool value = _;
  _g_object_get (&&player.ref, name, &&value, null);
  escape value;
end

code/tight
Player_Raw_Set_Region (var& IPlayerRaw player, var Region region) -> void
do
  _g_object_set(
      _G_OBJECT(&&player.ref),
      "x", region.x,
      "y", region.y,
      "z", region.z,
      "width", region.width,
      "height", region.height,
      null
  );
end

code/tight
Player_Raw_Seek (var& IPlayerRaw player, var u64 time, var bool relative) -> void
do
  _lp_media_seek(&&player.ref, relative, time);
end

code/tight
Player_Raw_Get_Running_Time (var& IPlayerRaw player) -> u64
do
  escape _lp_media_get_running_time (&&player.ref);
end

code/await Play_Raw (var& ISceneRaw scene, var& Media media)
                    -> (var& IPlayerRaw player)
                        -> void
do
  var&? _lp_Media ref = &call/dynamic Player_Raw_New(&scene, &media)
    finalize (ref) with
        // TODO: who destroys?
    end;

  var IPlayerRaw player_ = val IPlayerRaw(_, _, &ref!);
  player = &player_;

  call/dynamic Player_Raw_Set_Media (&player_, &media);

  do
    _lp_media_start(&&player_.ref);
  finalize (player_.ref) with
    _lp_media_stop(&&player_.ref);
  end

  _g_object_ref (&&player_.ref);

  loop do
    var _GObject&&  source;
    var _lp_Event&& evt;
    (source, evt) = await LP_EVENT until ((_LP_IS_MEDIA(source) as bool) and
                                        _LP_MEDIA(source) == &&player_.ref);

    var _GType type = _G_OBJECT_TYPE(evt);
    if type == _LP_TYPE_EVENT_START then
      emit player_.ok;
    else/if type == _LP_TYPE_EVENT_SEEK then
      emit player_.sought;
    else/if type == _LP_TYPE_EVENT_STOP then
      break;
    end
  end
end

#endif
