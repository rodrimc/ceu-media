#ifndef _CEU_MEDIA_RAW
#define _CEU_MEDIA_RAW

native/const
  _LP_TYPE_EVENT_ERROR,
  _LP_TYPE_EVENT_KEY,
  _LP_TYPE_EVENT_POINTER_CLICK,
  _LP_TYPE_EVENT_POINTER_MOVE,
  _LP_TYPE_EVENT_SEEK,
  _LP_TYPE_EVENT_START,
  _LP_TYPE_EVENT_STOP,
  _LP_TYPE_EVENT_TICK,
;

native/plain
  _char_ptr_ext,
  _lp_EventError,
  _lp_EventKey,
  _lp_EventPointerClick,
  _lp_EventPointerMove,
  _lp_EventTick,
  _lp_Event_ptr_ext,
;

native/pure
  _G_OBJECT,
  _G_OBJECT_TYPE,
  _LP_EVENT,
  _LP_EVENT_ERROR,
  _LP_EVENT_KEY,
  _LP_EVENT_POINTER_CLICK,
  _LP_EVENT_POINTER_MOVE,
  _LP_EVENT_TICK,
  _LP_IS_MEDIA,
  _LP_IS_SCENE,
  _LP_MEDIA,
  _LP_SCENE,
;

native/nohold
  _g_free,
  _g_object_get,
  _g_object_set,
  _g_object_unref,
  _g_object_ref,
  _lp_event_get_source,
  _lp_event_to_string,
  _lp_media_get_running_time,
  _lp_media_new,
  _lp_media_seek,
  _lp_media_stop,
  _lp_scene_advance,
  _lp_scene_pause,
  _lp_scene_receive,
  _lp_scene_resume,
;

native
  _GError,
  _GObject,
  _GType,
  _lp_Event,
  _lp_Media,
  _lp_media_start,
  _lp_scene_new,
  _lp_Scene,
;

input (_GObject&&, _lp_Event&&) LP_EVENT;

native/pre do
  ##include <glib.h>
  ##include <play.h>
  typedef char* char_ptr_ext;
  typedef lp_Event* lp_Event_ptr_ext;
end

/*********  Library Public API ***********/
data Region with
  var int x;
  var int y;
  var int width;
  var int height;
  var int z;
end

data Size with
  var int width;
  var int height;
end

data Media;

data Media.Text with
  vector[] byte   text;
  vector[] byte   font;
  var      Region region;
  var      uint   color;
end

data Media.Image with
  vector[] byte   uri;
  var      Region region;
  var      float  alpha;
end

data Media.Audio with
  vector[] byte  uri;
  var      float volume;
end

data Media.Video with
  vector[] byte   uri;
  var      Region region;
  var      float  alpha;
  var      float  volume;
end

/* SCENE */
data IScene with
  var&  _lp_Scene              ref;
  var&  Size?                  size;
  var   bool                   auto_advance;
  event (int, int, int, bool)  mouse_clicked;
  event (int, int)             mouse_moved;
  event (_char_ptr_ext, bool)  key;
  event (u64)                  tick;
  event (_char_ptr_ext)        error;
  event (void)                 quit;
end

code/tight
Scene_Pause (var& IScene scene) -> void;

code/tight
Scene_Resume (var& IScene scene) -> void;

code/tight
Scene_Set_Tick_Interval (var& IScene scene, var u64 interval) -> void;

code/await Scene (var Size? size)
              -> (var& IScene scene)
                  -> void;

/* PLAY */
data IPlay with
  event void      ok;
  event void      sought;
  var&  _lp_Media ref;
end

code/tight/dynamic
Play_New (var& IScene scene, dynamic var& Media media) -> _lp_Media&&;

code/tight/dynamic
Play_Set_Media (var& IPlay play, dynamic var& Media media) -> void;

code/tight
Play_Set_Char (var& IPlay play, var _char&& name, var _char&& value) -> void;

code/tight
Play_Set_Int (var& IPlay play, var _char&& name, var int value) -> void;

code/tight
Play_Get_Int (var& IPlay play, var _char&& name) -> int;

code/tight
Play_Set_Bool (var& IPlay play, var _char&& name, var bool value) -> void;

code/tight
Play_Get_Bool (var& IPlay play, var _char&& name) -> bool;

code/tight
Play_Seek (var& IPlay play, var u64 time, var bool relative) -> void;

code/tight
Play_Get_Running_Time (var& IPlay play) -> u64; 

code/await Play (var& IScene scene, var& Media media)
                  -> (var& IPlay play)
                      -> void;
#endif
