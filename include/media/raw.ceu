#ifndef _CEU_MEDIA_RAW
#define _CEU_MEDIA_RAW

native/const
  _LP_TYPE_EVENT_ERROR,
  _LP_TYPE_EVENT_KEY,
  _LP_TYPE_EVENT_POINTER_CLICK,
  _LP_TYPE_EVENT_POINTER_MOVE,
  _LP_TYPE_EVENT_SEEK,
  _LP_TYPE_EVENT_START,
  _LP_TYPE_EVENT_STOP,
  _LP_TYPE_EVENT_TICK,
;

native/plain
  _char_ptr_ext,
  _lp_EventError,
  _lp_EventKey,
  _lp_EventPointerClick,
  _lp_EventPointerMove,
  _lp_EventTick,
  _lp_Event_ptr_ext,
  _GObject_ptr_ext,
  _ceu_callback_media,
  _media_cb_,
;

native/pure
  _G_OBJECT,
  _G_IS_OBJECT,
  _G_OBJECT_TYPE,
  _LP_EVENT,
  _LP_EVENT_ERROR,
  _LP_EVENT_KEY,
  _LP_EVENT_POINTER_CLICK,
  _LP_EVENT_POINTER_MOVE,
  _LP_EVENT_TICK,
  _LP_IS_MEDIA,
  _LP_IS_SCENE,
  _LP_MEDIA,
  _LP_SCENE,
  _LP_TYPE_SCENE,
  _LP_TYPE_MEDIA,
;

native/nohold
  _g_free,
  _g_object_new,
  _g_object_get,
  _g_object_set,
  _g_object_unref,
  _g_object_ref,
  _lp_event_get_source,
  _lp_event_to_string,
  _lp_media_get_running_time,
  _lp_media_new,
  _lp_media_seek,
  _lp_media_stop,
  _lp_scene_advance,
  _lp_scene_pause,
  _lp_scene_receive,
  _lp_scene_resume,
  _lp_scene_get_current_time,
  _ceu_callback_register,
;

native
  _GError,
  _GObject,
  _GType,
  _lp_Event,
  _lp_Media,
  _lp_media_start,
  _lp_scene_new,
  _lp_Scene,
  _SCENE_SEED,
  _PLAYER_SEED,
  _strdup,
;

#define NS 1000000
#define FREQ 33
input (_GObject&&, _lp_Event&&) LP_EVENT;

/* SCENE INPUT EVENTS */
input (_GObject&&)                      CM_SCENE_RAW_START;
input (_GObject&&, int, int, int, bool) CM_SCENE_RAW_MOUSE_CLICK;
input (_GObject&&, int, int)            CM_SCENE_RAW_MOUSE_MOVE;
input (_GObject&&, _char_ptr_ext, bool) CM_SCENE_RAW_KEY;
input (_GObject&&, u64)                 CM_SCENE_RAW_TICK;
input (_GObject&&, _char_ptr_ext)       CM_SCENE_RAW_ERROR;

/* PLAYER INPUT EVENTS */
input (_GObject&&)                      CM_PLAYER_RAW_START;
input (_GObject&&)                      CM_PLAYER_RAW_STOP;
input (_GObject&&)                      CM_PLAYER_RAW_PAUSE;
input (_GObject&&)                      CM_PLAYER_RAW_SOUGHT;
input (_GObject&&, int, int, int, bool) CM_PLAYER_RAW_MOUSE_CLICK;

native/pre do
  ##include <glib.h>
  ##include <play.h>
  typedef char* char_ptr_ext;
  typedef lp_Event* lp_Event_ptr_ext;
  typedef GObject* GObject_ptr_ext;

  unsigned int SCENE_SEED = 0;
  unsigned int PLAYER_SEED = 0;

  int
  ceu_callback_media (int cmd, tceu_callback_val p1, tceu_callback_val p2
##ifdef CEU_FEATURES_TRACE
                      , tceu_trace trace
##endif
                      )
  {
    int is_handled = 1;
    static int64_t old = 0;

    switch (cmd)
    {
##ifndef CEU_MEDIA_WCLOCK_DISABLE
      case CEU_CALLBACK_WCLOCK_DT:
      {
        int64_t now = g_get_monotonic_time ();
        if (old == 0)
          ceu_callback_ret.num = 0;
        else
          ceu_callback_ret.num = now - old;
        old = now;
        break;
      }
##endif

      default:
        is_handled = 0;
    }
    return is_handled;
  }

  tceu_callback media_cb_ = { &ceu_callback_media, NULL };
end

_ceu_callback_register (&&_media_cb_);

/*********  Library Public API ***********/
data Region with
  var int x;
  var int y;
  var int width;
  var int height;
  var int z;
end

data Size with
  var int width;
  var int height;
end

data Properties;

data Properties.Text with
  var[] byte   text    = [] .. "";
  var[] byte   font    = [] .. "";
  var   Region region  = val Region (0, 0, 0, 0, 1);
  var   uint   color   = 0xffffffff;
end

data Properties.Image with
  var   Region region  = val Region (0, 0, 0, 0, 1);
  var   real  alpha   = 1.0;
end

data Properties.Audio with
  var   real volume   = 1.0;
end

data Properties.Video with
  var   Region region  = val Region (0, 0, 0, 0, 1);;
  var   real  alpha   = 1.0;
  var   r64   volume  = 1.0;
end

/* SCENE */
data ISceneRaw with
  var&  _lp_Scene  ref;
  var&  Size?      size;
  event (none)     cm_pause;
  event (none)     cm_resume;
  event (none)     quit;
end

event (bool) pause_all;

code/await Scene_Raw (var Size? size)
              -> (var& ISceneRaw handle)
                  -> none
do
  var int w = 0;
  var int h = 0;
  var int tick_interval = 30 * NS;
  if size? then
    w = size!.width;
    h = size!.height;
  end
  var bool finalizing = false;

  var&? _lp_Scene ref_ = &_g_object_new(_LP_TYPE_SCENE,
                              "width",       w,
                              "height",      h,
                              "slave-audio", true,
                              "lockstep",    true,
                              "sync",        true,
                              null)
    finalize (ref_) with
      finalizing = true;
      _g_object_unref (_G_OBJECT(&&ref_!));
    end;

  var& _lp_Scene ref = &ref_!;

  var ISceneRaw scene_ = val ISceneRaw (&ref_!, &size, _, _, _);
  handle = &scene_;

  event (bool) freeze_clock;
  event (none) ok;

  par/or do
    loop do
      var _lp_Event_ptr_ext evt = null;
      do finalize with
        if (evt != null) then
          _g_object_unref(_G_OBJECT(evt));
        end
      end

      if finalizing then
        break;
      end

      await async/thread (ref, evt) do
        evt = _lp_scene_receive (&&ref, true);
      end

      var _GObject_ptr_ext source = _lp_event_get_source(evt);
      var _GType type = _G_OBJECT_TYPE (evt);

      /* MOUSE CLICK*/
      if type == _LP_TYPE_EVENT_POINTER_CLICK then
        var _lp_EventPointerClick&& evt_ = _LP_EVENT_POINTER_CLICK(evt);

        var r64 x = _;
        var r64 y = _;
        var int button=_;
        var int pressed=_;
        _g_object_get(
            _G_OBJECT(evt_),
            "x", &&x,
            "y", &&y,
            "button", &&button,
            "press", &&pressed,
            null,
        );

        if _LP_IS_SCENE(source) as bool then
          await async (source, x, y, button, pressed) do
            emit CM_SCENE_RAW_MOUSE_CLICK (source, x as int, y as int, button,
              pressed as bool);
          end
        else
          await async (source, x, y, button, pressed) do
            emit CM_PLAYER_RAW_MOUSE_CLICK (source, x as int, y as int,
              button, pressed as bool);
          end
        end

      /* MOUSE MOVE */
      else/if type == _LP_TYPE_EVENT_POINTER_MOVE then
        var _lp_EventPointerMove&& evt_ = _LP_EVENT_POINTER_MOVE(evt);

        var r64 x = _;
        var r64 y = _;
        _g_object_get(_G_OBJECT(evt_), "x", &&x, "y",&&y, null);

        if _LP_IS_SCENE(source) as bool then
          await async (source, x, y) do
            emit CM_SCENE_RAW_MOUSE_MOVE (source, x as int, y as int);
          end
        end

      /* KEY */
      else/if type == _LP_TYPE_EVENT_KEY then
        var _lp_EventKey&& evt_ = _LP_EVENT_KEY(evt);

        var _char_ptr_ext key     = _;
        var int           pressed = _;
        _g_object_get(
            _G_OBJECT(evt_),
            "key",   &&key,
            "press", &&pressed,
            null
        );
        do finalize with
          _g_free (key);
        end

        if _LP_IS_SCENE(source) as bool then
          await async (source, key, pressed) do
            emit CM_SCENE_RAW_KEY (source, key, pressed as bool);
          end
        end

      /* TICK */
      else/if type == _LP_TYPE_EVENT_TICK then
        var _lp_EventTick&& evt_ = _LP_EVENT_TICK(evt);

        var u64 ticks = _;
        _g_object_get (_G_OBJECT(evt_),
            "serial", &&ticks,
            null);

        if _LP_IS_SCENE(source) as bool then
          await async (source, ticks) do
            emit CM_SCENE_RAW_TICK (source, ticks);
          end
        end

      /* START */
      else/if type == _LP_TYPE_EVENT_START then
        if _LP_IS_MEDIA(source) as bool then
          await async (source) do
            emit CM_PLAYER_RAW_START (source);
          end
        else/if _LP_IS_SCENE(source) as bool then
          if _LP_SCENE (source) == &&handle.ref then
            emit ok;
          end
          await async (source) do
            emit CM_SCENE_RAW_START (source);
          end
        end

      /* SEEK */
      else/if type == _LP_TYPE_EVENT_SEEK then
        await async (source) do
          emit CM_PLAYER_RAW_SOUGHT (source);
        end

      /* STOP */
      else/if type == _LP_TYPE_EVENT_STOP then
        await async (source) do
          emit CM_PLAYER_RAW_STOP (source);
        end

      /* PAUSE */
      else/if type == _LP_TYPE_EVENT_STOP then
        await async (source) do
          emit CM_PLAYER_RAW_PAUSE (source);
        end

      /* ERROR */
      else/if type == _LP_TYPE_EVENT_ERROR then
        var _lp_EventError&& evt_ = _LP_EVENT_ERROR(evt);
        var _GError&& err = null;
        var _char_ptr_ext msg = null;

        _g_object_get (_G_OBJECT(evt_), "error", &&err, null);
        msg = _lp_event_to_string (_LP_EVENT(evt));

        if _LP_IS_SCENE(source) as bool then
          await async (source, msg) do
            emit CM_SCENE_RAW_ERROR (source, msg);
          end
        end

        do finalize with
          _g_free (msg);
        end

        break;
      end
    end
  with
    loop do
      await handle.cm_pause;
      _lp_scene_pause (&&ref);
      emit freeze_clock (true);
      await handle.cm_resume;
      _lp_scene_resume (&&ref);
      emit freeze_clock (false);
    end
  with
    await ok;
    pause/if freeze_clock do
      var uint ticks = 0;
      par do
        loop do
          await pause;
          var u64 time = _lp_scene_get_current_time (&&ref);
#ifdef CEU_MEDIA_DEBUG
          _printf ("ticks, time: %u, %lu\n", ticks, time);
#endif
        end
      with
        pause/if outer.pause_all do
          every FREQ ms do
            ticks = ticks + 1;
            _lp_scene_advance (&&ref, FREQ * NS);
          end
        end
      end
    end
  with
    await scene_.quit;
  end
end

/* PLAY */
data IPlayerRaw with
  var&  _lp_Media ref;
end

/* Scene Raw functions */
code/tight
Scene_Raw_Set_Tick_Interval (var& ISceneRaw scene, var u64 interval) -> none
do
  _g_object_set (&&scene.ref,
                "interval",
                interval,
                null);
end

/* Player_Raw_New */

code/tight
Player_Raw_New (var& ISceneRaw scene, var&[] byte uri) -> _lp_Media&&
do
  if $uri == 0 then
    escape _g_object_new (_LP_TYPE_MEDIA,
                          "scene", &&scene.ref,
                          "sync", true,
                          "uri", null,
                          null);
  else
    escape _g_object_new (_LP_TYPE_MEDIA,
                          "scene", &&scene.ref,
                          "sync", true,
                          "uri", &&uri[0],
                          null);
  end
end

/* Player_Raw_Set_Properties */

code/tight/dynamic
Player_Raw_Set_Properties (var& IPlayerRaw player, var&/dynamic Properties prop) -> none
do
  /* none; */
  /* _ceu_dbg_assert(0); */
end

code/tight/dynamic
Player_Raw_Set_Properties (var& IPlayerRaw player, var&/dynamic Properties.Text text) -> none
do
  _g_object_set (
      _G_OBJECT(&&player.ref),
      "text",       &&text.text[0],
      "text-font",  &&text.font[0],
      "text-color", text.color,
      "x",          text.region.x,
      "y",          text.region.y,
      "z",          text.region.z,
      "width",      text.region.width,
      "height",     text.region.height,
      null
  );
end

code/tight/dynamic
Player_Raw_Set_Properties (var& IPlayerRaw player, var&/dynamic Properties.Image image) -> none
do
  _g_object_set (
      _G_OBJECT(&&player.ref),
      "x",      image.region.x,
      "y",      image.region.y,
      "z",      image.region.z,
      "width",  image.region.width,
      "height", image.region.height,
      "alpha",  image.alpha,
      null
  );
end

code/tight/dynamic
Player_Raw_Set_Properties (var& IPlayerRaw player, var&/dynamic Properties.Audio audio) -> none
do
  _g_object_set (
    _G_OBJECT(&&player.ref),
    "volume", audio.volume,
    null
  );
end

code/tight/dynamic
Player_Raw_Set_Properties (var& IPlayerRaw player, var&/dynamic Properties.Video video) -> none
do
  _g_object_set (
    _G_OBJECT(&&player.ref),
    "x",      video.region.x,
    "y",      video.region.y,
    "z",      video.region.z,
    "width",  video.region.width,
    "height", video.region.height,
    "alpha",  video.alpha,
    "volume", video.volume,
    null
  );
end

/* Player_Raw_Set_* */

code/tight
Player_Raw_Set_Char (var& IPlayerRaw player, var _char&& name,
                     var _char&& value) -> none
do
  _g_object_set(&&player.ref, name, value, null);
end

code/tight
Player_Raw_Set_Int (var& IPlayerRaw player, var _char&& name,
                    var int value) -> none
do
  _g_object_set(&&player.ref, name, value, null);
end

code/tight
Player_Raw_Get_Int (var& IPlayerRaw player, var _char&& name) -> int
do
  var int value = 0;
  _g_object_get (&&player.ref, name, &&value, null);
  escape value;
end

code/tight
Player_Raw_Set_Double (var& IPlayerRaw player, var _char&& name,
                       var r64 value) -> none
do
  _g_object_set(&&player.ref, name, value, null);
end

code/tight
Player_Raw_Get_Double (var& IPlayerRaw player, var _char&& name) ->r64
do
  var r64 value = 0.0;
  _g_object_get (&&player.ref, name, &&value, null);
  escape value;
end

code/tight
Player_Raw_Set_Real (var& IPlayerRaw player, var _char&& name,
                       var real value) -> none
do
  _g_object_set(&&player.ref, name, value, null);
end

code/tight
Player_Raw_Get_Real (var& IPlayerRaw player, var _char&& name) ->real
do
  var real value = 0.0;
  _g_object_get (&&player.ref, name, &&value, null);
  escape value;
end

code/tight
Player_Raw_Set_Bool (var& IPlayerRaw player, var _char&& name,
                     var bool value) -> none
do
  _g_object_set(&&player.ref, name, value, null);
end

code/tight
Player_Raw_Get_Bool (var& IPlayerRaw player, var _char&& name) -> bool
do
  var bool value = _;
  _g_object_get (&&player.ref, name, &&value, null);
  escape value;
end

code/tight
Player_Raw_Set_Region (var& IPlayerRaw player, var Region region) -> none
do
  _g_object_set(
      _G_OBJECT(&&player.ref),
      "x", region.x,
      "y", region.y,
      "z", region.z,
      "width", region.width,
      "height", region.height,
      null
  );
end

code/tight
Player_Raw_Seek (var& IPlayerRaw player, var s64 time,
                 var bool relative) -> none
do
  _lp_media_seek(&&player.ref, relative, time);
end

code/tight
Player_Raw_Get_Running_Time (var& IPlayerRaw player) -> u64
do
  escape _lp_media_get_running_time (&&player.ref);
end

code/await Play_Raw (var& []byte uri, var& Properties prop, var& ISceneRaw scene)
                    -> (var& IPlayerRaw player)
                        -> none
do
  var&? _lp_Media ref = &call Player_Raw_New(&scene, &uri)
    finalize (ref) with
        // TODO: who destroys?
    end;

  var IPlayerRaw player_ = val IPlayerRaw(&ref!);
  player = &player_;

  call/dynamic Player_Raw_Set_Properties (&player_, &prop);

  do
    _lp_media_start(&&player_.ref);
  finalize (player_.ref) with
    _lp_media_stop(&&player_.ref);
  end

  _g_object_ref (&&player_.ref);

  var _GObject_ptr_ext source;
  source = await CM_PLAYER_RAW_STOP
           until (_LP_MEDIA(source) == &&player_.ref);
end


#endif
