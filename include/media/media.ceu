#ifndef _CEU_MEDIA_MEDIA
#define _CEU_MEDIA_MEDIA

#include "c.ceu"
#include "media/raw.ceu"

input (uint, int, int, int, bool) CM_SCENE_MOUSE_CLICK;
input (uint, int, int)            CM_SCENE_MOUSE_MOVE;
input (uint, _char_ptr_ext, bool) CM_SCENE_KEY;
input (uint, u64)                 CM_SCENE_TICK;
input (uint, _char_ptr_ext)       CM_SCENE_ERROR;

/* PLAYER INPUT EVENTS */
input (uint)                      CM_PLAYER_START;
input (uint)                      CM_PLAYER_STOP;
input (uint)                      CM_PLAYER_PAUSE;
input (uint)                      CM_PLAYER_SOUGHT;
input (uint, int, int, int, bool) CM_PLAYER_MOUSE_CLICK;

data Emit_Args;

data Emit_Args.Scene_Mouse_Click with
  var uint          source;
  var int           x;
  var int           y;
  var int           button;
  var bool          pressed;
end

data Emit_Args.Scene_Mouse_Move with
  var uint          source;
  var int           x;
  var int           y;
end

data Emit_Args.Scene_Key with
  var uint          source;
  var _char_ptr_ext key;
  var bool          pressed;
end

data Emit_Args.Scene_Tick with
  var uint          source;
  var u64           tick;
end

data Emit_Args.Scene_Error with
  var uint          source;
  var _char_ptr_ext error;
end

data Emit_Args.Player_Start with
  var uint          source;
end

data Emit_Args.Player_Stop with
  var uint          source;
end

data Emit_Args.Player_Pause with
  var uint          source;
end

data Emit_Args.Player_Sought with
  var uint          source;
end

data Emit_Args.Player_Mouse_Click with
  var uint          source;
  var int           x;
  var int           y;
  var int           button;
  var bool          pressed;
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args args) -> none
do
  /* none; */
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Scene_Mouse_Click args) -> none
do
  var uint source = args.source;
  var int  x = args.x;
  var int  y = args.y;
  var int  button = args.button;
  var bool pressed = args.pressed;
  await async (source, x, y, button, pressed) do
    emit CM_SCENE_MOUSE_CLICK (source, x, y, button, pressed);
  end
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Scene_Mouse_Move args) -> none
do
  var uint source = args.source;
  var int  x = args.x;
  var int  y = args.y;
  await async (source, x, y) do
    emit CM_SCENE_MOUSE_MOVE (source, x, y);
  end
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Scene_Key args) -> none
do
  var uint           source = args.source;
  var _char_ptr_ext  key = args.key;
  var bool           pressed = args.pressed;
  await async (source, key, pressed) do
    emit CM_SCENE_KEY (source, key, pressed);
  end
  _free(key);
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Scene_Tick args) -> none
do
  var uint source = args.source;
  var u64  tick = args.tick;
  await async (source, tick) do
    emit CM_SCENE_TICK (source, tick);
  end
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Scene_Error args) -> none
do
  var uint           source = args.source;
  var _char_ptr_ext  error = args.error;
  await async (source, error) do
    emit CM_SCENE_ERROR (source, error);
  end
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Player_Start args) -> none
do
  var uint source = args.source;
  await async (source) do
    emit CM_PLAYER_START (source);
  end
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Player_Stop args) -> none
do
  var uint source = args.source;
  await async (source) do
    emit CM_PLAYER_STOP (source);
  end
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Player_Pause args) -> none
do
  var uint source = args.source;
  await async (source) do
    emit CM_PLAYER_PAUSE (source);
  end
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Player_Sought args) -> none
do
  var uint source = args.source;
  await async (source) do
    emit CM_PLAYER_SOUGHT (source);
  end
end

code/await/dynamic
Emit_Event (var&/dynamic Emit_Args.Player_Mouse_Click args) -> none
do
  var uint source = args.source;
  var int  x = args.x;
  var int  y = args.y;
  var int  button = args.button;
  var bool pressed = args.pressed;
  await async (source, x, y, button, pressed) do
    emit CM_PLAYER_MOUSE_CLICK (source, x, y, button, pressed);
  end
end

/* SCENE */
data IScene with
  var& ISceneRaw raw;
  var&  uint     self;
  event (none)   ok;
  event (none)   quit;
end

pool [] Emit_Event pool_evts;
var Emit_Args.Scene_Mouse_Click  sclick = val Emit_Args.Scene_Mouse_Click (_, _, _, _,_);
var Emit_Args.Scene_Mouse_Move   smm_args = val Emit_Args.Scene_Mouse_Move (_, _, _);
var Emit_Args.Scene_Key          skey = val Emit_Args.Scene_Key (_, _, _);
var Emit_Args.Scene_Tick         stick = val Emit_Args.Scene_Tick (_, _);
var Emit_Args.Scene_Error        serror = val Emit_Args.Scene_Error (_, _);

var Emit_Args.Player_Start       pstart_args = val Emit_Args.Player_Start (_);
var Emit_Args.Player_Stop        pstop_args =  val Emit_Args.Player_Stop (_);
var Emit_Args.Player_Pause       ppause_args = val Emit_Args.Player_Pause (_);
var Emit_Args.Player_Sought      psought_args = val Emit_Args.Player_Sought (_);
var Emit_Args.Player_Mouse_Click pclick_args = val Emit_Args.Player_Mouse_Click (_, _, _, _, _);

code/await Scene (var Size? size)
              -> (var& IScene handle)
                  -> none
do

  var Size raw_size =  _;
  if (size?) then
    raw_size = size!;
  end
  var&? Scene_Raw raw = spawn Scene_Raw (raw_size);
  watching (raw) do
    var uint self = _SCENE_SEED;
    _SCENE_SEED = _SCENE_SEED + 1;
    var IScene ref_ = val IScene (&raw.handle, &self, _, _);
    handle = &ref_;
    par/or do
      var _GObject&& source;
      source = await CM_SCENE_RAW_START until
                                _LP_SCENE (source) == &&raw.handle.ref;
      emit ref_.ok;
      await FOREVER;
    with
      var _GObject&& source;
      every (source, outer.sclick.x, outer.sclick.y, outer.sclick.button,
        outer.sclick.pressed) in CM_SCENE_RAW_MOUSE_CLICK do
        if _LP_SCENE(source) == &&raw.handle.ref then
          outer.sclick.source = ref_.self;
          spawn/dynamic Emit_Event (&outer.sclick) in outer.pool_evts;
        end
      end
    with
      var _GObject&& source;
      every (source, outer.smm_args.x, outer.smm_args.y) in
                                                  CM_SCENE_RAW_MOUSE_MOVE do
        if _LP_SCENE(source) == &&raw.handle.ref then
          outer.smm_args.source = ref_.self;
          spawn/dynamic Emit_Event (&outer.smm_args) in outer.pool_evts;
        end
      end
    with
      var _GObject&& source;
      every (source, outer.skey.key, outer.skey.pressed) in
                                                         CM_SCENE_RAW_KEY do
        if _LP_SCENE(source) == &&raw.handle.ref then
          outer.skey.source = ref_.self;
          outer.skey.key = _strdup (outer.skey.key);
          spawn/dynamic Emit_Event (&outer.skey) in outer.pool_evts;
        end
      end
    with
      var _GObject&& source;
      every (source, outer.stick.tick) in CM_SCENE_RAW_TICK do
        if _LP_SCENE(source) == &&raw.handle.ref then
          outer.stick.source = ref_.self;
          spawn/dynamic Emit_Event (&outer.stick) in outer.pool_evts;
        end
      end
    with
      var _GObject&& source;
      every (source, outer.serror.error) in CM_SCENE_RAW_ERROR do
        if _LP_SCENE(source) == &&raw.handle.ref then
          outer.serror.source = ref_.self;
          spawn/dynamic Emit_Event (&outer.serror) in outer.pool_evts;
        end
      end
    with
      await ref_.quit;
    end
  end
end

code/await
Scene_Pause (var& IScene scene) -> none
do
  /* await Scene_Raw_Pause (&scene.raw); */
  emit scene.raw.cm_pause;
end

code/await
Scene_Resume (var& IScene scene) -> none
do
  emit scene.raw.cm_resume;
  /* await Scene_Raw_Resume (&scene.raw); */
end

code/tight
Scene_Set_Tick_Interval (var& IScene scene, var u64 interval) -> none
do
  call Scene_Raw_Set_Tick_Interval (&scene.raw, interval);
end

/* PLAYER */
data IPlayer with
  var& IPlayerRaw raw;
  var& uint       self;
end

code/await Play (var& []byte uri, var& Properties prop, var& IScene scene)
                  -> (var& IPlayer handle)
                      -> none
do
  var&? Play_Raw raw = spawn Play_Raw (&uri, &prop, &scene.raw);
  watching (raw) do
    var uint self = _PLAYER_SEED;
    _PLAYER_SEED = _PLAYER_SEED + 1;

    var IPlayer ref_ = val IPlayer (&raw.player, &self);
    handle = &ref_;

    par do
      var _GObject_ptr_ext source;
      every (source) in CM_PLAYER_RAW_START do
        if _LP_MEDIA(source) == &&raw.player.ref then
          outer.pstart_args.source = ref_.self;
          spawn/dynamic Emit_Event (&outer.pstart_args) in outer.pool_evts;
        end
      end
    with
      var _GObject_ptr_ext source;
      every (source) in CM_PLAYER_RAW_SOUGHT do
        if _LP_MEDIA(source) == &&raw.player.ref then
          outer.pstop_args.source = ref_.self;
          spawn/dynamic Emit_Event (&outer.pstop_args) in outer.pool_evts;
        end
      end
    with
      var _GObject_ptr_ext source;
      every (source, outer.pclick_args.x, outer.pclick_args.y,
        outer.pclick_args.button, outer.pclick_args.pressed) in
                                                  CM_PLAYER_RAW_MOUSE_CLICK do
        if _LP_MEDIA(source) == &&raw.player.ref then
          outer.pclick_args.source = ref_.self;
          spawn/dynamic Emit_Event (&outer.pclick_args) in outer.pool_evts;
        end
      end
    end
  end
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties prop) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &prop);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Text text) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &text);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Image image) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &image);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Audio audio) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &audio);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Video video) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &video);
end

code/tight
Player_Set_Char (var& IPlayer player, var _char&& name, var _char&& value) -> none
do
  call Player_Raw_Set_Char (&player.raw, name, value);
end

code/tight
Player_Set_Int (var& IPlayer player, var _char&& name, var int value) -> none
do
  call Player_Raw_Set_Int (&player.raw, name, value);
end

code/tight
Player_Get_Int (var& IPlayer player, var _char&& name) -> int
do
  escape call Player_Raw_Get_Int (&player.raw, name);
end

code/tight
Player_Set_Double (var& IPlayer player, var _char&& name, var r64 value) -> none
do
  call Player_Raw_Set_Double (&player.raw, name, value);
end

code/tight
Player_Get_Double (var& IPlayer player, var _char&& name) ->r64
do
  escape call Player_Raw_Get_Double (&player.raw, name);
end

code/tight
Player_Set_Bool (var& IPlayer player, var _char&& name, var bool value) -> none
do
  call Player_Raw_Set_Bool (&player.raw, name, value);
end

code/tight
Player_Get_Bool (var& IPlayer player, var _char&& name) -> bool
do
  escape call Player_Raw_Get_Bool (&player.raw, name);
end

code/tight
Player_Set_Region (var& IPlayer player, var Region region) -> none
do
  call Player_Raw_Set_Region (&player.raw, region);
end

code/tight
Player_Seek (var& IPlayer player, var s64 time, var bool relative) -> none
do
  call Player_Raw_Seek (&player.raw, time, relative);
end

code/tight
Player_Get_Running_Time (var& IPlayer player) -> u64
do
  escape call Player_Raw_Get_Running_Time (&player.raw);
end

#endif
