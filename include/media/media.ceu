#ifndef _CEU_MEDIA_MEDIA
#define _CEU_MEDIA_MEDIA

#include "c.ceu"
#include "uv/uv.ceu"
#include "media/raw.ceu"

input (uint, int, int, int, bool) CM_SCENE_MOUSE_CLICK;
input (uint, int, int)            CM_SCENE_MOUSE_MOVE;
input (uint, _char_ptr_ext, bool) CM_SCENE_KEY;
input (uint, u64)                 CM_SCENE_TICK;
input (uint, _char_ptr_ext)       CM_SCENE_ERROR;

/* PLAYER INPUT EVENTS */
input (uint)                      CM_PLAYER_START;
input (uint)                      CM_PLAYER_STOP;
input (uint)                      CM_PLAYER_PAUSE;
input (uint)                      CM_PLAYER_SOUGHT;
input (uint, int, int, int, bool) CM_PLAYER_MOUSE_CLICK;

/* SCENE */
data IScene with
  var& ISceneRaw raw;
  var&  uint      self;
  event (none)   quit;
end

code/await Scene (var Size? size)
              -> (var& IScene scene)
                  -> none
do
  var Size raw_size =  _;
  if (size?) then
    raw_size = size!;
  end
  var&? Scene_Raw raw = spawn Scene_Raw (raw_size);
  watching (raw) do
    var uint self = _SCENE_SEED;
    _SCENE_SEED = _SCENE_SEED + 1;
    var IScene ref_ = val IScene (&raw.scene, &self, _);
    scene = &ref_;
    par/or do
      var _GObject&& source;
      var int x;
      var int y;
      var int button;
      var bool press;
      loop do
        (source, x, y, button, press) = await CM_SCENE_RAW_MOUSE_CLICK
                                  until (_LP_SCENE(source) == &&raw.scene.ref);
        await async (ref_, x, y, button, press) do
          emit CM_SCENE_MOUSE_CLICK (ref_.self, x, y, button, press);
        end
      end
    with
      var _GObject&& source;
      var int x;
      var int y;
      loop do
        (source, x, y) = await CM_SCENE_RAW_MOUSE_MOVE
                         until (_LP_SCENE(source) == &&raw.scene.ref);

        await async (ref_, x, y) do
          emit CM_SCENE_MOUSE_MOVE (ref_.self, x, y);
        end
      end
    with
      var _GObject&& source;
      var _char_ptr_ext key;
      var bool press;
      loop do
        (source, key, press) = await CM_SCENE_RAW_KEY
                               until (_LP_SCENE(source) == &&raw.scene.ref);

        key = _strdup (key);
        do finalize with
          _free (key);
        end

        await async (ref_, key, press) do
          emit CM_SCENE_KEY (ref_.self, key, press);
        end
      end
    with
      var _GObject&& source;
      var u64 tick;
      loop do
        (source, tick) = await CM_SCENE_RAW_TICK
                         until (_LP_SCENE(source) == &&raw.scene.ref);

        await async (ref_, tick) do
          emit CM_SCENE_TICK (ref_.self, tick);
        end
      end
    with
      var _GObject&& source;
      var _char_ptr_ext error;
      loop do
        (source, error) = await CM_SCENE_RAW_ERROR
                          until (_LP_SCENE(source) == &&raw.scene.ref);

        await async (ref_, error) do
          emit CM_SCENE_ERROR (ref_.self, error);
        end
      end
    with
      await ref_.quit;
    end
  end
end

code/tight
Scene_Pause (var& IScene scene) -> none
do
  call Scene_Raw_Pause (&scene.raw);
end

code/tight
Scene_Resume (var& IScene scene) -> none
do
  call Scene_Raw_Resume (&scene.raw);
end

code/tight
Scene_Set_Tick_Interval (var& IScene scene, var u64 interval) -> none
do
  call Scene_Raw_Set_Tick_Interval (&scene.raw, interval);
end

/* PLAYER */
data IPlayer with
  var& IPlayerRaw raw;
  var& uint        self;
end

code/await Play (var& IScene scene, var& Media media)
                  -> (var& IPlayer player)
                      -> none
do
  var&? Play_Raw raw = spawn Play_Raw (&scene.raw, &media);
  watching (raw) do
    var uint self = _PLAYER_SEED;
    _PLAYER_SEED = _PLAYER_SEED + 1;

    var IPlayer ref_ = val IPlayer (&raw.player, &self);
    player = &ref_;

    par do
      loop do
        var _GObject_ptr_ext source;
        source = await CM_PLAYER_RAW_START
                 until (_LP_MEDIA(source) == &&raw.player.ref);
        await async (ref_) do
          emit CM_PLAYER_START (ref_.self);
        end
      end
    with
      loop do
        var _GObject_ptr_ext source;
        source = await CM_PLAYER_RAW_SOUGHT
                 until (_LP_MEDIA(source) == &&raw.player.ref);
        await async (ref_) do
          emit CM_PLAYER_SOUGHT (ref_.self);
        end
      end
    with
      var _GObject_ptr_ext source;
      var int x;
      var int y;
      var int button;
      var bool press;
      loop do
        (source, x, y, button, press) = await CM_PLAYER_RAW_MOUSE_CLICK
                                until (_LP_MEDIA(source) == &&raw.player.ref);

        await async (ref_, x, y, button, press) do
          emit CM_PLAYER_MOUSE_CLICK (ref_.self, x, y, button, press);
        end
      end
    end
  end
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, var&/dynamic Media media) -> none
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &media);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, var&/dynamic Media.Text text) -> none
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &text);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, var&/dynamic Media.Image image) -> none
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &image);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, var&/dynamic Media.Audio audio) -> none
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &audio);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, var&/dynamic Media.Video video) -> none
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &video);
end

code/tight
Player_Set_Char (var& IPlayer player, var _char&& name, var _char&& value) -> none
do
  call Player_Raw_Set_Char (&player.raw, name, value);
end

code/tight
Player_Set_Int (var& IPlayer player, var _char&& name, var int value) -> none
do
  call Player_Raw_Set_Int (&player.raw, name, value);
end

code/tight
Player_Get_Int (var& IPlayer player, var _char&& name) -> int
do
  escape call Player_Raw_Get_Int (&player.raw, name);
end

code/tight
Player_Set_Double (var& IPlayer player, var _char&& name, var r64 value) -> none
do
  call Player_Raw_Set_Double (&player.raw, name, value);
end

code/tight
Player_Get_Double (var& IPlayer player, var _char&& name) ->r64
do
  escape call Player_Raw_Get_Double (&player.raw, name);
end

code/tight
Player_Set_Bool (var& IPlayer player, var _char&& name, var bool value) -> none
do
  call Player_Raw_Set_Bool (&player.raw, name, value);
end

code/tight
Player_Get_Bool (var& IPlayer player, var _char&& name) -> bool
do
  escape call Player_Raw_Get_Bool (&player.raw, name);
end

code/tight
Player_Set_Region (var& IPlayer player, var Region region) -> none
do
  call Player_Raw_Set_Region (&player.raw, region);
end

code/tight
Player_Seek (var& IPlayer player, var s64 time, var bool relative) -> none
do
  call Player_Raw_Seek (&player.raw, time, relative);
end

code/tight
Player_Get_Running_Time (var& IPlayer player) -> u64
do
  escape call Player_Raw_Get_Running_Time (&player.raw);
end

#endif
