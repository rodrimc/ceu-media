#ifndef _CEU_MEDIA_MEDIA
#define _CEU_MEDIA_MEDIA

#include "c.ceu"
#include "media/raw.ceu"

input (uint, int, int, int, bool) CM_SCENE_MOUSE_CLICK;
input (uint, int, int)            CM_SCENE_MOUSE_MOVE;
input (uint, _char_ptr_ext, bool) CM_SCENE_KEY;
input (uint, u64)                 CM_SCENE_TICK;
input (uint, _char_ptr_ext)       CM_SCENE_ERROR;

/* PLAYER INPUT EVENTS */
input (uint)                      CM_PLAYER_START;
input (uint)                      CM_PLAYER_STOP;
input (uint)                      CM_PLAYER_PAUSE;
input (uint)                      CM_PLAYER_SOUGHT;
input (uint, int, int, int, bool) CM_PLAYER_MOUSE_CLICK;

native/pos do
  /* scene raw */
  void emit_scene_mouse_click (uint self, int x, int y, int button,
    int pressed)
  {
    tceu_input_CM_SCENE_MOUSE_CLICK p = {self, x, y, button, pressed};
    ceu_input (CEU_INPUT_CM_SCENE_MOUSE_CLICK, &p);
  }

  void emit_scene_mouse_move (uint self, int x, int y)
  {
    tceu_input_CM_SCENE_MOUSE_MOVE p = {self, x, y};
    ceu_input (CEU_INPUT_CM_SCENE_MOUSE_MOVE, &p);
  }

  void emit_scene_key (uint self, char *key, int pressed)
  {
    tceu_input_CM_SCENE_KEY p = {self, key, pressed};
    ceu_input (CEU_INPUT_CM_SCENE_KEY, &p);
  }

  void emit_scene_tick (uint self, uint64_t ticks)
  {
    tceu_input_CM_SCENE_TICK p = {self, ticks};
    ceu_input (CEU_INPUT_CM_SCENE_TICK, &p);
  }

  void emit_scene_error (uint self, char *msg)
  {
    tceu_input_CM_SCENE_ERROR p = {self, msg};
    ceu_input (CEU_INPUT_CM_SCENE_ERROR, &p);
  }

  /* player raw */
  void emit_player_mouse_click (uint self, int x, int y, int button,
    int pressed)
  {
    tceu_input_CM_PLAYER_MOUSE_CLICK p = {self, x, y, button, pressed};
    ceu_input (CEU_INPUT_CM_PLAYER_MOUSE_CLICK, &p);
  }

  void emit_player_start (uint self)
  {
    tceu_input_CM_PLAYER_START p = {self};
    ceu_input (CEU_INPUT_CM_PLAYER_START, &p);
  }

  void emit_player_sought (uint self)
  {
    tceu_input_CM_PLAYER_SOUGHT p = {self};
    ceu_input (CEU_INPUT_CM_PLAYER_SOUGHT, &p);
  }

  void emit_player_stop (uint self)
  {
    tceu_input_CM_PLAYER_STOP p = {self};
    ceu_input (CEU_INPUT_CM_PLAYER_STOP, &p);
  }

  void emit_player_pause (uint self)
  {
    tceu_input_CM_PLAYER_PAUSE p = {self};
    ceu_input (CEU_INPUT_CM_PLAYER_PAUSE, &p);
  }
end

native/nohold
  /* scene raw */
  _emit_scene_mouse_click,
  _emit_scene_mouse_move,
  _emit_scene_key,
  _emit_scene_tick,
  _emit_scene_error,

  /* player raw */
  _emit_player_mouse_click,
  _emit_player_start,
  _emit_player_sought,
  _emit_player_stop,
  _emit_player_pause,
;

/* SCENE */
data IScene with
  var& ISceneRaw raw;
  var&  uint     self;
  event (none)   quit;
end

code/await Scene (var Size? size)
              -> (var& IScene handle)
                  -> none
do
  var Size raw_size =  _;
  if (size?) then
    raw_size = size!;
  end
  var&? Scene_Raw raw = spawn Scene_Raw (raw_size);
  watching (raw) do
    var uint self = _SCENE_SEED;
    _SCENE_SEED = _SCENE_SEED + 1;
    var IScene ref_ = val IScene (&raw.handle, &self, _);
    handle = &ref_;
    par/or do
      var _GObject&& source;
      var int x;
      var int y;
      var int button;
      var bool press;
      every (source, x, y, button, press) in CM_SCENE_RAW_MOUSE_CLICK do
        if _LP_SCENE(source) == &&raw.handle.ref then
          _emit_scene_mouse_click (ref_.self, x, y, button, press);
        end
      end
    with
      var _GObject&& source;
      var int x;
      var int y;
      every (source, x, y) in CM_SCENE_RAW_MOUSE_MOVE do
        if _LP_SCENE(source) == &&raw.handle.ref then
          _emit_scene_mouse_move (ref_.self, x, y);
        end
      end
    with
      var _GObject&& source;
      var _char_ptr_ext key;
      var bool press;
      every (source, key, press) in CM_SCENE_RAW_KEY do
        if _LP_SCENE(source) == &&raw.handle.ref then
          key = _strdup (key);
          _emit_scene_key (ref_.self, key, press);
          _free (key);
        end
      end
    with
      var _GObject&& source;
      var u64 tick;
      every (source, tick) in CM_SCENE_RAW_TICK do
        if _LP_SCENE(source) == &&raw.handle.ref then
          _emit_scene_tick (ref_.self, tick);
        end
      end
    with
      var _GObject&& source;
      var _char_ptr_ext error;
      every (source, error) in CM_SCENE_RAW_ERROR do
        if _LP_SCENE(source) == &&raw.handle.ref then
          _emit_scene_error (ref_.self, error);
        end
      end
    with
      await ref_.quit;
    end
  end
end

code/await
Scene_Pause (var& IScene scene) -> none
do
  /* await Scene_Raw_Pause (&scene.raw); */
  emit scene.raw.cm_pause;
end

code/await
Scene_Resume (var& IScene scene) -> none
do
  emit scene.raw.cm_resume;
  /* await Scene_Raw_Resume (&scene.raw); */
end

code/tight
Scene_Set_Tick_Interval (var& IScene scene, var u64 interval) -> none
do
  call Scene_Raw_Set_Tick_Interval (&scene.raw, interval);
end

/* PLAYER */
data IPlayer with
  var& IPlayerRaw raw;
  var& uint       self;
end

code/await Play (var& []byte uri, var& Properties prop, var& IScene scene)
                  -> (var& IPlayer handle)
                      -> none
do
  var&? Play_Raw raw = spawn Play_Raw (&uri, &prop, &scene.raw);
  watching (raw) do
    var uint self = _PLAYER_SEED;
    _PLAYER_SEED = _PLAYER_SEED + 1;

    var IPlayer ref_ = val IPlayer (&raw.player, &self);
    handle = &ref_;

    par do
      var _GObject_ptr_ext source;
      every (source) in CM_PLAYER_RAW_START do
        if _LP_MEDIA(source) == &&raw.player.ref then
          _emit_player_start (ref_.self);
        end
      end
    with
      var _GObject_ptr_ext source;
      every (source) in CM_PLAYER_RAW_SOUGHT do
        if _LP_MEDIA(source) == &&raw.player.ref then
          _emit_player_sought (ref_.self);
        end
      end
    with
      var _GObject_ptr_ext source;
      var int x;
      var int y;
      var int button;
      var bool press;
      every (source, x, y, button, press) in CM_PLAYER_RAW_MOUSE_CLICK do
        if _LP_MEDIA(source) == &&raw.player.ref then
          _emit_player_mouse_click (ref_.self, x, y, button, press);
        end
      end
    end
  end
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties prop) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &prop);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Text text) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &text);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Image image) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &image);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Audio audio) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &audio);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Video video) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &video);
end

code/tight
Player_Set_Char (var& IPlayer player, var _char&& name, var _char&& value) -> none
do
  call Player_Raw_Set_Char (&player.raw, name, value);
end

code/tight
Player_Set_Int (var& IPlayer player, var _char&& name, var int value) -> none
do
  call Player_Raw_Set_Int (&player.raw, name, value);
end

code/tight
Player_Get_Int (var& IPlayer player, var _char&& name) -> int
do
  escape call Player_Raw_Get_Int (&player.raw, name);
end

code/tight
Player_Set_Double (var& IPlayer player, var _char&& name, var r64 value) -> none
do
  call Player_Raw_Set_Double (&player.raw, name, value);
end

code/tight
Player_Get_Double (var& IPlayer player, var _char&& name) ->r64
do
  escape call Player_Raw_Get_Double (&player.raw, name);
end

code/tight
Player_Set_Bool (var& IPlayer player, var _char&& name, var bool value) -> none
do
  call Player_Raw_Set_Bool (&player.raw, name, value);
end

code/tight
Player_Get_Bool (var& IPlayer player, var _char&& name) -> bool
do
  escape call Player_Raw_Get_Bool (&player.raw, name);
end

code/tight
Player_Set_Region (var& IPlayer player, var Region region) -> none
do
  call Player_Raw_Set_Region (&player.raw, region);
end

code/tight
Player_Seek (var& IPlayer player, var s64 time, var bool relative) -> none
do
  call Player_Raw_Seek (&player.raw, time, relative);
end

code/tight
Player_Get_Running_Time (var& IPlayer player) -> u64
do
  escape call Player_Raw_Get_Running_Time (&player.raw);
end

#endif
