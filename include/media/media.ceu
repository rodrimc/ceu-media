#ifndef _CEU_MEDIA_MEDIA
#define _CEU_MEDIA_MEDIA

#include "c.ceu"
#include "media/raw.ceu"

input (uint, int, int, int, bool) CM_SCENE_MOUSE_CLICK;
input (uint, int, int)            CM_SCENE_MOUSE_MOVE;
input (uint, _char_ptr_ext, bool) CM_SCENE_KEY;
input (uint, u64)                 CM_SCENE_TICK;
input (uint, _char_ptr_ext)       CM_SCENE_ERROR;

/* PLAYER INPUT EVENTS */
input (uint)                      CM_PLAYER_START;
input (uint)                      CM_PLAYER_STOP;
input (uint)                      CM_PLAYER_PAUSE;
input (uint)                      CM_PLAYER_SOUGHT;
input (uint, int, int, int, bool) CM_PLAYER_MOUSE_CLICK;

/* SCENE */
data IScene with
  var& ISceneRaw raw;
  var&  uint     self;
  event (none)   ok;
  event (none)   quit;
end

code/await Emit_Scene_Mouse_Click (var uint id, var int x, var int y,
  var int button, var bool pressed) -> none
do
  await async (id, x, y, button, pressed) do
    emit CM_SCENE_MOUSE_CLICK (id, x, y, button, pressed);
  end
end

code/await Emit_Scene_Mouse_Move (var uint id, var int x, var int y) -> none
do
  await async (id, x, y) do
    emit CM_SCENE_MOUSE_MOVE (id, x, y);
  end
end

code/await Emit_Scene_Key (var uint id, var _char_ptr_ext key,
  var bool pressed) -> none
do
  await async (id, key, pressed) do
    emit CM_SCENE_KEY (id, key, pressed);
  end
  _free (key);
end

code/await Emit_Scene_Tick (var uint id, var u64 ticks) -> none
do
  await async (id, ticks) do
    emit CM_SCENE_TICK (id, ticks);
  end
end

code/await Emit_Scene_Error (var uint id, var _char_ptr_ext msg) -> none
do
  await async (id, msg) do
    emit CM_SCENE_ERROR (id, msg);
  end
end

code/await Emit_Player_Mouse_Click (var uint id, var int x, var int y,
  var int button, var bool pressed) -> none
do
  await async (id, x, y, button, pressed) do
    emit CM_PLAYER_MOUSE_CLICK (id, x, y, button, pressed);
  end
end

code/await Emit_Player_Start (var uint id) -> none
do
  await async (id) do
    emit CM_PLAYER_START (id);
  end
end

code/await Emit_Player_Stop (var uint id) -> none
do
  await async (id) do
    emit CM_PLAYER_STOP (id);
  end
end

code/await Emit_Player_Pause (var uint id) -> none
do
  await async (id) do
    emit CM_PLAYER_PAUSE (id);
  end
end

code/await Emit_Player_Sought (var uint id) -> none
do
  await async (id) do
    emit CM_PLAYER_SOUGHT (id);
  end
end

code/await Scene (var Size? size)
              -> (var& IScene handle)
                  -> none
do
  /* pools */
  pool [] Emit_Scene_Mouse_Click pool_scene_mouse_click;
  pool [] Emit_Scene_Mouse_Move  pool_scene_mouse_move;
  pool [] Emit_Scene_Key         pool_scene_key;
  pool [] Emit_Scene_Tick        pool_scene_tick;
  pool [] Emit_Scene_Error       pool_scene_error;

  var Size raw_size =  _;
  if (size?) then
    raw_size = size!;
  end
  var&? Scene_Raw raw = spawn Scene_Raw (raw_size);
  watching (raw) do
    var uint self = _SCENE_SEED;
    _SCENE_SEED = _SCENE_SEED + 1;
    var IScene ref_ = val IScene (&raw.handle, &self, _, _);
    handle = &ref_;
    par/or do
      var _GObject&& source;
      source = await CM_SCENE_RAW_START until
                                _LP_SCENE (source) == &&raw.handle.ref;
      emit ref_.ok;
      await FOREVER;
    with
      var _GObject&& source;
      var int x;
      var int y;
      var int button;
      var bool pressed;
      every (source, x, y, button, pressed) in CM_SCENE_RAW_MOUSE_CLICK do
        if _LP_SCENE(source) == &&raw.handle.ref then
          spawn Emit_Scene_Mouse_Click (ref_.self, x, y, button, pressed)
            in pool_scene_mouse_click;
        end
      end
    with
      var _GObject&& source;
      var int x;
      var int y;
      every (source, x, y) in CM_SCENE_RAW_MOUSE_MOVE do
        if _LP_SCENE(source) == &&raw.handle.ref then
          spawn Emit_Scene_Mouse_Move (ref_.self, x, y)
            in pool_scene_mouse_move;
        end
      end
    with
      var _GObject&& source;
      var _char_ptr_ext key;
      var bool press;
      every (source, key, press) in CM_SCENE_RAW_KEY do
        if _LP_SCENE(source) == &&raw.handle.ref then
          key = _strdup (key);
          spawn Emit_Scene_Key (ref_.self, key, press) in pool_scene_key;
        end
      end
    with
      var _GObject&& source;
      var u64 tick;
      every (source, tick) in CM_SCENE_RAW_TICK do
        if _LP_SCENE(source) == &&raw.handle.ref then
          spawn Emit_Scene_Tick (ref_.self, tick) in pool_scene_tick;
        end
      end
    with
      var _GObject&& source;
      var _char_ptr_ext error;
      every (source, error) in CM_SCENE_RAW_ERROR do
        if _LP_SCENE(source) == &&raw.handle.ref then
          spawn Emit_Scene_Tick (ref_.self, error) in pool_scene_error;
        end
      end
    with
      await ref_.quit;
    end
  end
end

code/await
Scene_Pause (var& IScene scene) -> none
do
  /* await Scene_Raw_Pause (&scene.raw); */
  emit scene.raw.cm_pause;
end

code/await
Scene_Resume (var& IScene scene) -> none
do
  emit scene.raw.cm_resume;
  /* await Scene_Raw_Resume (&scene.raw); */
end

code/tight
Scene_Set_Tick_Interval (var& IScene scene, var u64 interval) -> none
do
  call Scene_Raw_Set_Tick_Interval (&scene.raw, interval);
end

/* PLAYER */
data IPlayer with
  var& IPlayerRaw raw;
  var& uint       self;
end

code/await Play (var& []byte uri, var& Properties prop, var& IScene scene)
                  -> (var& IPlayer handle)
                      -> none
do
  /* pools */
  pool [] Emit_Player_Mouse_Click pool_player_mouse_click;
  pool [] Emit_Player_Start       pool_player_start;
  pool [] Emit_Player_Stop        pool_player_stop;
  pool [] Emit_Player_Pause       pool_player_pause;
  pool [] Emit_Player_Sought      pool_player_sought;

  var&? Play_Raw raw = spawn Play_Raw (&uri, &prop, &scene.raw);
  watching (raw) do
    var uint self = _PLAYER_SEED;
    _PLAYER_SEED = _PLAYER_SEED + 1;

    var IPlayer ref_ = val IPlayer (&raw.player, &self);
    handle = &ref_;

    par do
      var _GObject_ptr_ext source;
      every (source) in CM_PLAYER_RAW_START do
        if _LP_MEDIA(source) == &&raw.player.ref then
          spawn Emit_Player_Start (ref_.self) in pool_player_start;
        end
      end
    with
      var _GObject_ptr_ext source;
      every (source) in CM_PLAYER_RAW_SOUGHT do
        if _LP_MEDIA(source) == &&raw.player.ref then
          spawn Emit_Player_Sought (ref_.self) in pool_player_sought;
        end
      end
    with
      var _GObject_ptr_ext source;
      var int x;
      var int y;
      var int button;
      var bool press;
      every (source, x, y, button, press) in CM_PLAYER_RAW_MOUSE_CLICK do
        if _LP_MEDIA(source) == &&raw.player.ref then
          spawn Emit_Player_Mouse_Click (ref_.self, x, y, button, press)
            in pool_player_mouse_click;
        end
      end
    end
  end
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties prop) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &prop);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Text text) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &text);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Image image) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &image);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Audio audio) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &audio);
end

code/tight/dynamic
Player_Set_Properties (var& IPlayer player, var&/dynamic Properties.Video video) -> none
do
  call/dynamic Player_Raw_Set_Properties (&player.raw, &video);
end

code/tight
Player_Set_Char (var& IPlayer player, var _char&& name, var _char&& value) -> none
do
  call Player_Raw_Set_Char (&player.raw, name, value);
end

code/tight
Player_Set_Int (var& IPlayer player, var _char&& name, var int value) -> none
do
  call Player_Raw_Set_Int (&player.raw, name, value);
end

code/tight
Player_Get_Int (var& IPlayer player, var _char&& name) -> int
do
  escape call Player_Raw_Get_Int (&player.raw, name);
end

code/tight
Player_Set_Double (var& IPlayer player, var _char&& name, var r64 value) -> none
do
  call Player_Raw_Set_Double (&player.raw, name, value);
end

code/tight
Player_Get_Double (var& IPlayer player, var _char&& name) ->r64
do
  escape call Player_Raw_Get_Double (&player.raw, name);
end

code/tight
Player_Set_Bool (var& IPlayer player, var _char&& name, var bool value) -> none
do
  call Player_Raw_Set_Bool (&player.raw, name, value);
end

code/tight
Player_Get_Bool (var& IPlayer player, var _char&& name) -> bool
do
  escape call Player_Raw_Get_Bool (&player.raw, name);
end

code/tight
Player_Set_Region (var& IPlayer player, var Region region) -> none
do
  call Player_Raw_Set_Region (&player.raw, region);
end

code/tight
Player_Seek (var& IPlayer player, var s64 time, var bool relative) -> none
do
  call Player_Raw_Seek (&player.raw, time, relative);
end

code/tight
Player_Get_Running_Time (var& IPlayer player) -> u64
do
  escape call Player_Raw_Get_Running_Time (&player.raw);
end

#endif
