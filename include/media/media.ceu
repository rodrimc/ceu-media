#ifndef _CEU_MEDIA_MEDIA
#define _CEU_MEDIA_MEDIA

#include "c.ceu"
#include "uv/uv.ceu"
#include "media/raw.ceu"

#define NS 1000000
#define FREQ 15

code/await Scene (var Size? size)
              -> (var& IScene scene)
                  -> void
do
  var int w=0, h=0, tick_interval = 30 * NS;
  if size? then
    w = size!.width;
    h = size!.height;
  end

  var&? _lp_Scene ref_ = &_lp_scene_new(w, h)
    finalize (ref_) with
      _g_object_unref (_G_OBJECT(&&ref_!));
    end;

  var& _lp_Scene ref = &ref_!;

  var IScene scene_ = val IScene(&ref_!,&size, true,_,_,_,_,_,_);
  scene = &scene_;

  _g_object_set (&&ref, 
                  "slave-audio", true, 
                  "lockstep", true,
                  "interval", tick_interval,
                  null);

 spawn do
    loop do
      var _lp_Event_ptr_ext evt = null;
      do finalize with
        if (evt != null) then
          _g_object_unref(_G_OBJECT(evt));
        end
      end
      await async/thread (ref, evt) do
        evt = _lp_scene_receive (&&ref, true);
      end
      await async (evt) do 
        if evt != null then
          emit LP_EVENT(_lp_event_get_source(evt), evt);
        end
      end
    end
    await FOREVER;
  end

  par/or do
    if scene_.auto_advance == true then
      every FREQ ms do
        _lp_scene_advance(&&ref, FREQ * NS);
      end
    end
  with
    loop do
      var _GObject&&  source;
      var _lp_Event&& evt;
      (source, evt) = await LP_EVENT until ((_LP_IS_SCENE(source) as bool) and
                                            _LP_SCENE(source) == &&ref);

      var _GType type = _G_OBJECT_TYPE (evt);

      /* MOUSE */

      if type == _LP_TYPE_EVENT_POINTER_CLICK then
        var _lp_EventPointerClick&& evt_ = _LP_EVENT_POINTER_CLICK(evt);

        var f64 x=_, y=_;
        var int button=_, pressed=_;
        _g_object_get(
            _G_OBJECT(evt_),
            "x", &&x,
            "y", &&y,
            "button", &&button,
            "press", &&pressed,
            null,
        );

        emit scene_.mouse_clicked(x as int, y as int,
                                     button, pressed as bool);
      else/if type == _LP_TYPE_EVENT_POINTER_MOVE then
        var _lp_EventPointerMove&& evt_ = _LP_EVENT_POINTER_MOVE(evt);

        var f64 x=_, y=_;
        _g_object_get(_G_OBJECT(evt_), "x", &&x, "y",&&y, null);

        emit scene_.mouse_moved(x as int, y as int);

      /* KEY */

      else/if type == _LP_TYPE_EVENT_KEY then
        var _lp_EventKey&& evt_ = _LP_EVENT_KEY(evt);

        var _char_ptr_ext key     = _;
        var int           pressed = _;
        _g_object_get(
            _G_OBJECT(evt_),
            "key",   &&key,
            "press", &&pressed,
            null
        );
        do finalize with
          _g_free (key);
        end

        emit scene_.key(key, pressed as bool);

      /* TICK */

      else/if type == _LP_TYPE_EVENT_TICK then
        var _lp_EventTick&& evt_ = _LP_EVENT_TICK(evt);

        var u64 ticks = _;
        _g_object_get (_G_OBJECT(evt_), 
            "serial", &&ticks, 
            null);

        emit scene_.tick (ticks);

      /* ERROR */

      else/if type == _LP_TYPE_EVENT_ERROR then
        var _lp_EventError&& evt_ = _LP_EVENT_ERROR(evt);
        var _GError&& err = null;
        var _char_ptr_ext msg = null;

        _g_object_get (_G_OBJECT(evt_), "error", &&err, null);
        msg = _lp_event_to_string (_LP_EVENT(evt));

        emit scene_.error (msg);

        do finalize with
          _g_free (msg);
        end

        break;
      end
    end
  with
    await scene_.quit;
  end
end


#include "media/aux.ceu"

/* PLAYER */
code/await Play (var& IScene scene, var& Media media)
                  -> (var& IPlay play)
                      -> void
do
  var&? _lp_Media ref = &call/dynamic Play_New(&scene, &media)
    finalize (ref) with
        // TODO: who destroys?
    end;

  var IPlay play_ = val IPlay(_, _, &ref!);
  play = &play_;

  call/dynamic Play_Set_Media(&play_, &media);

  do
    _lp_media_start(&&play_.ref);
  finalize (play_.ref) with
    _lp_media_stop(&&play_.ref);
  end

  _g_object_ref (&&play_.ref);

  loop do
    var _GObject&&  source;
    var _lp_Event&& evt;
    (source, evt) = await LP_EVENT until ((_LP_IS_MEDIA(source) as bool) and
                                        _LP_MEDIA(source) == &&play_.ref);

    var _GType type = _G_OBJECT_TYPE(evt);
    if type == _LP_TYPE_EVENT_START then
      emit play_.ok;
    else/if type == _LP_TYPE_EVENT_SEEK then
      emit play_.sought;
    else/if type == _LP_TYPE_EVENT_STOP then
      break;
    end
  end
end

#endif
