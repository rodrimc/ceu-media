#ifndef _CEU_MEDIA_SRT
#define _CEU_MEDIA_SRT

#include "uv/fs.ceu"
#include "media/media.ceu"

code/await Srt (var& IScene scene, var _char&& path, var Region region) -> none 
do
  var&? UV_FS_Open fs = spawn UV_FS_Open(path, _, _O_RDONLY, 0);
  watching (fs) do
    await fs.file.ok;
    _ceu_dbg_assert(fs.file.handle >= 0);

    var int   now = 0;
    var usize length = 0;
    var int i;
    loop i do
      var int fr = 0;
      var int to = 0;

      // N
      do
        var[] byte line;
        var ssize n = await UV_FS_Read_Line(&fs.file,&line,length);
        if n == 0 then
          break;
        end
        _ceu_dbg_assert(n > 0);
        length = length + (n as usize);

        var int cur = _;
        var ssize n = _sscanf(&&line[0], "%d", &&cur);
        _ceu_dbg_assert(n == 1);
        _ceu_dbg_assert(cur == i+1);
        _printf("SUBTITLE = %d\n", cur);
      end

      // 00:00:01,000 --> 00:00:00,000
      do
        var[] byte line;
        var ssize n = await UV_FS_Read_Line(&fs.file,&line,length);
        _ceu_dbg_assert(n > 0);
        _ceu_dbg_assert(n == 30);
        length = length + (n as usize);

        var int fr_h=0;
        var int fr_m=0;
        var int fr_s=0;
        var int fr_ms=0;
        var int to_h=0;
        var int to_m=0;
        var int to_s=0;
        var int to_ms=0;
        var int n = _sscanf(&&line[0], "%d:%d:%d,%d --> %d:%d:%d,%d",
                    &&fr_h, &&fr_m, &&fr_s, &&fr_ms,
                    &&to_h, &&to_m, &&to_s, &&to_ms);
        _ceu_dbg_assert(n == 8);

        _printf("%d:%d:%d,%d --> %d:%d:%d,%d\n",
                    fr_h, fr_m, fr_s, fr_ms,
                    to_h, to_m, to_s, to_ms);

        fr = fr_ms + fr_s*1000 + fr_m*1000*60 + fr_h*1000*60*60;
        to = to_ms + to_s*1000 + to_m*1000*60 + to_h*1000*60*60;
      end

      // subtitles
      var[] byte lines;
      loop do
        var[] byte line;
        var ssize n = await UV_FS_Read_Line(&fs.file,&line,length);
        if n == 0 then
          break;
        end
        _ceu_dbg_assert(n > 0);
        length = length + (n as usize);

        if $line == 0 then
          break;
        end
        lines = lines..[{'\n'}]..line;
      end

      // Player.play()
      do
        await (fr-now)ms;

        watching (to-fr)ms do
          _printf("%s\n", &&lines[0]);
          var Media.Text text = val Media.Text (
                                    []..lines,
                                    [].."",
                                    region,
                                    0xffff0000,
                                  );
          await Play(&scene, &text);
        end

        now = to;
      end
    end
  end
end

#endif
