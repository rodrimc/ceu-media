#include "c.ceu"
#include "media.ceu"

data MediaList with
  tag NIL;
or
  tag CONS with
    var Media     media;
    var MediaList next;
  end
end

class Slideshow with
  var Scene& scene;
  pool MediaList[]& parallel;   // these run in parallel in the "parallel"
  pool MediaList[]& sequence;     // these run in sequence, one after the other
  var int           time;
  var _charptr      quit;
do
  par/or do
    var _charptr key;
    var int press;
    (key, press) = await this.scene.key_event 
                   until (_strcmp(key, quit)==0 and press==0);
  with
    traverse list in &&this.parallel do
      watching *list do
        if list:CONS then
          spawn Player.play(list:CONS.media, &scene);     // in parallel
          traverse &&list:CONS.next;
        end
      end
    end
    traverse list in &&this.sequence do
      watching *list do
        if list:CONS then
          watching (time)s do
            do Player.play(list:CONS.media, &scene);    // in sequence
          end
          traverse &&list:CONS.next;
        end
      end
    end
  end
end

class LuaSlideshowAdd with
    pool MediaList[]&& list;
do
    [[ assert(media ~= nil) ]];
    var bool is_video = [[ media.tag == 'video' ]];
    var bool is_image = [[ media.tag == 'image' ]];
    var bool is_audio = [[ media.tag == 'audio' ]];
    var bool is_text  = [[ media.tag == 'text'  ]];

    if is_video then
        _assert(0); // TODO
    else/if is_image then
        var char[] uri    = [[ media.uri     ]];
        var int    x      = [[ media.rect[1] ]];
        var int    y      = [[ media.rect[2] ]];
        var int    width  = [[ media.rect[3] ]];
        var int    height = [[ media.rect[4] ]];
        var int    z      = [[ media.z       ]];
        var float  alpha  = [[ media.alpha   ]];
        watching *list do
            list:CONS.next =
                new MediaList.CONS(
                        Media.IMAGE((_char&&)&&uri, Region(x,y,width,height), z, alpha),
                        MediaList.NIL());
        end
     else/if is_audio then
        var char[] uri    = [[ media.uri    ]];
        var float  volume = [[ media.volume ]];
        watching *list do
            list:CONS.next =
                new MediaList.CONS(
                        Media.AUDIO((_char&&)&&uri, volume),
                        MediaList.NIL());
        end
    else/if is_text then
        _assert(0); // TODO
    else
        _assert(0);
    end
end

class LuaSlideshow with
do
    [[ assert(type(SLIDESHOW) == 'table') ]];

    var int width      = [[ SLIDESHOW.width  ]];
    var int height     = [[ SLIDESHOW.height ]];
    var int time       = [[ SLIDESHOW.time   ]];
    var char [] quit   = [[ SLIDESHOW.quit   ]];

    pool MediaList[] parallel = new MediaList.CONS( Media.EMPTY(), MediaList.NIL());
    var bool has_parallel = [[ SLIDESHOW.parallel ~= nil ]];
    if has_parallel then
        [[ assert(type(SLIDESHOW.parallel) == 'table') ]];
        pool MediaList[]&& cur = &&parallel;
        var int n = [[ #SLIDESHOW.parallel ]];
        watching *cur do // TODO: really required?
          loop i in n do
              [[ media = SLIDESHOW.parallel[@i+1] ]];
              do LuaSlideshowAdd with
                  this.list = cur;
              end;
              cur = &&cur:CONS.next;
          end
        end
    end

    pool MediaList[] sequence = new MediaList.CONS( Media.EMPTY(), MediaList.NIL());
    var bool has_sequence = [[ SLIDESHOW.sequence ~= nil ]];
    if has_sequence then
        [[ assert(type(SLIDESHOW.sequence) == 'table') ]];
        pool MediaList[]&& cur = &&sequence;
        var int n = [[ #SLIDESHOW.sequence ]];
        watching *cur do // TODO: really required?
          loop i in n do
              [[ media = SLIDESHOW.sequence[@i+1] ]];
              do LuaSlideshowAdd with
                  this.list = cur;
              end;
              cur = &&cur:CONS.next;
          end
        end
    end

    var Scene scene with
      this.size = Size(width,height);
      this.auto_advance = true;
    end;

    do Slideshow with
        this.scene      = &scene;
        this.parallel   = &parallel;
        this.sequence   = &sequence;
        this.time       = 5;
        this.quit       = "q";
    end;
end
